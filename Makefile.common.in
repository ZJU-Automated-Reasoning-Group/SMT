PROJECT_NAME := SMT
PROJ_VERSION := 1.0

# Set this variable to the top of the LLVM source tree.
LLVM_SRC_ROOT = @LLVM_SRC@

# Set this variable to the top level directory where LLVM was built
# (this is *not* the same as OBJ_ROOT as defined in LLVM's Makefile.config).
LLVM_OBJ_ROOT = @LLVM_OBJ@

# Set the source root and source directory pathnames
PROJ_SRC_ROOT := $(subst //,/,@abs_top_srcdir@)

# Set the root directory of this project's object files
PROJ_OBJ_ROOT := $(subst //,/,@abs_top_builddir@)

# Set the root directory of this project's install prefix
PROJ_INSTALL_ROOT := @prefix@

# Determine if a static z3 library will be used
ENABLE_STATICZ3 := @ENABLE_STATICZ3@

# Determine if address sanitizer is enabled according to configuration
ENABLE_ASAN := @ENABLE_ASAN@

# Receive extra ld flags from configure
EXTRA_LD_OPTIONS=@EXTRA_LD_OPTIONS@


# Options
CXXFLAGS += -Wall -Wno-deprecated -I${PROJ_SRC_ROOT}/third-party/z3/src/api/c++ -I${PROJ_SRC_ROOT}/third-party/z3/src/api/ -fexceptions

LDFLAGS += ${EXTRA_LD_OPTIONS}

ifeq ($(ENABLE_ASAN), 1)
	ASANFLAGS = -fsanitize=address -fuse-ld=gold -fno-omit-frame-pointer
	CXXFLAGS += $(ASANFLAGS)
	CFLAGS += $(ASANFLAGS)
	LDFLAGS += $(ASANFLAGS)
endif

LIBS += -static-libgcc -static-libstdc++

# Check operating system
ifeq ($(OS), Windows_NT)
    PPHOST_OS = WINDOWS
else
	UNAME_S := $(shell uname -s)
	ifeq ($(UNAME_S), Linux)
		PPHOST_OS = LINUX
	endif
	ifeq ($(UNAME_S), Darwin)
		PPHOST_OS = DARWIN
	endif
	ifneq (,$(findstring CYGWIN, $(UNAME_S)))
		PPHOST_OS = WINDOWS
	endif
endif

# For linux we need the —start-group commands
# For OS X we don’t need them. 
ifeq ($(PPHOST_OS), OSX)

else
	# The LLVM options TOOLLINKOPTS and TOOLLINKOPTSB are the secret sauce for adding linking options before/after linked libraries 
	TOOLLINKOPTS = -Wl,--start-group
	TOOLLINKOPTSB = -Wl,--end-group
endif

# LLVM's variables should be set before including LLVM's Makefile
include $(LLVM_SRC_ROOT)/Makefile.common


####################################################
# Submodule libraries
####################################################
# Check dynamic library extension
DylibExt = so

ifeq ($(PPHOST_OS), WINDOWS)
	DylibExt = dll
else
	ifeq ($(PPHOST_OS), DARWIN)
		DylibExt = dylib
	endif
endif

ifeq ($(ENABLE_STATICZ3), 1)
	Z3Lib = libz3.a
	Z3LinkOpt = -l:libz3.a
else
	Z3Lib = libz3.${DylibExt}
	Z3LinkOpt = -lz3
endif

Z3LinkOpt += -fopenmp -lrt
Z3LibPath = ${LibDir}/${Z3Lib}

z3::
	if [ ! -f ${PROJ_SRC_ROOT}/third-party/z3/build/${Z3Lib} ]; then \
		 cd ${PROJ_SRC_ROOT}/third-party/z3/; python2.7 scripts/mk_make.py --staticlib; cd ${PROJ_OBJ_ROOT}; \
		 ${MAKE} -C ${PROJ_SRC_ROOT}/third-party/z3/build/; \
	fi
	${CP} ${PROJ_SRC_ROOT}/third-party/z3/build/${Z3Lib} ${LibDir}

${Z3LibPath} : z3


z3-clean::
	$(RM) -rf ${PROJ_SRC_ROOT}/third-party/z3/build/

